FROM harmoniteam/harmoni:noetic-base

RUN ROS_DISTRO="noetic"

RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -

RUN APT_INSTALL="apt-get install -y --no-install-recommends" && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
    python3-osrf-pycommon \
    python3-catkin-tools \
    python3-catkin-lint \
    # EXTRAS
    ros-noetic-robot-state-publisher \
    ros-noetic-joint-state-publisher-gui \
    ros-noetic-audio-common \
    # CLEANUP
    && rm -rf -- /var/lib/apt/lists/* 
# && PIP_INSTALL="python3.8 -m pip --no-cache-dir install --upgrade" && \
# $PIP_INSTALL \
# osrf-pycommon


# ==================================================================
# Clone Harmoni
# ------------------------------------------------------------------
ENV ROS_WS /root/harmoni_catkin_ws
RUN mkdir -p $ROS_WS/src
WORKDIR $ROS_WS

#caching protection for Harmoni, per https://stackoverflow.com/a/39278224/5715374
ADD https://api.github.com/repos/interaction-lab/HARMONI/git/refs/heads/develop /root/version.json
RUN git -C src clone \
    -b develop \
    https://github.com/interaction-lab/HARMONI.git 

# ==================================================================
# Build Harmoni from source
# ARCH section handles building for different architectures.
# ------------------------------------------------------------------
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac; \
    \
    if [ "$ARCH" = 'arm64' ]; then \
        echo >&2 'linking for arm64.'; \
        archPath='aarch64-linux-gnu'; \
    elif [ "$ARCH" = 'armv7' ]; then \
        echo >&2 'linking for armv7 '; \
        archPath='arm-linux-gnueabihf'; \
    else \
        echo >&2 'linking for x86/amd64'; \
        archPath='x86_64-linux-gnu'; \
    fi; \
    \
    ln -vs /usr/lib/$archPath/libboost_python-py38.so /usr/lib/$archPath/libboost_python3.so; \
    \
    catkin config \
    --extend /opt/ros/$ROS_DISTRO \
    -DPYTHON_EXECUTABLE=/usr/bin/python3.8 \
    -DPYTHON_INCLUDE_DIR=/usr/include/python3.8m \
    -DPYTHON_LIBRARY=/usr/lib/$archPath/libpython3.8m.so; \
    catkin build --limit-status-rate 0.1;

RUN mkdir -p /root/local_mount/ \
    && ln -vs /root/harmoni_catkin_ws/src/HARMONI /root/local_mount/

# ==================================================================
# Download default models for local STT, TTS services
# ------------------------------------------------------------------
WORKDIR $ROS_WS/src/HARMONI/harmoni_models

# STT
RUN mkdir stt && cd stt \
    && wget "https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/deepspeech-0.9.3-models.pbmm" \
    && wget "https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/deepspeech-0.9.3-models.scorer"

# TTS
RUN cd .. \
    && mkdir -p tts && cd tts \
    && gdown --id 1dntzjWFg7ufWaTaFy80nRz-Tu02xWZos -O tts_model.pth.tar \
    && gdown --id 18CQ6G6tBEOfvCHlPqP8EBI4xWbrr9dBc -O config.json \
    && gdown --id 1Ty5DZdOc0F7OTGj9oJThYbL5iVu_2G0K -O vocoder_model.pth.tar \
    && gdown --id 1Rd0R_nRCrbjEdpOwq6XwZAktvugiBvmu -O config_vocoder.json \
    && gdown --id 11oY3Tv0kQtxK_JPgxrfesa99maVXHNxU -O scale_stats.npy

WORKDIR $ROS_WS/src/HARMONI/harmoni_actuators/harmoni_tts

RUN sudo apt-get update && sudo apt-get install espeak -y \
    && git clone https://github.com/coqui-ai/TTS \
    && cd TTS \
    && git checkout b1935c97 \
    && pip install -r requirements.txt \
    && python setup.py install

# ==================================================================
# For convenience add a source script to bashrc and update without clearing
# ------------------------------------------------------------------
RUN \
    echo 'source /setup_script.sh' >> /root/.bashrc \
    && apt-get update -y && apt-get upgrade -y

# setup entrypoint and bash setup script
COPY ./dockerfiles/config/harmoni_entrypoint.sh /
COPY ./dockerfiles/config/setup_script.sh /


ENTRYPOINT ["/harmoni_entrypoint.sh"]
CMD ["bash"]
